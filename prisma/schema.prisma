// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Properties
  username       String   @id
  hashedPassword String
  firstName      String
  middleName     String
  lastName       String
  phone          String
  email          String
  imageId        String   @default(uuid())
  pathName       String   @default("")
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  updatedAt      DateTime @updatedAt @db.Timestamp(6)

  // Relations
  Cart   Cart?
  Orders Order[]
}

model Product {
  id      Int           @id @default(autoincrement())
  name    String
  price   Float
  status  ProductStatus
  inStock Int

  Category   ProductCategory
  CartItems  CartItem[]
  OrderItems OrderItem[]
  Images     ProductImages[]
}

model ProductImages {
  imageId  String @id @default(uuid())
  pathName String @default("")

  Product   Product @relation(fields: [ProductId], references: [id])
  ProductId Int
}

model Admin {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  hashedPassword String
  email          String   @unique
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  updatedAt      DateTime @updatedAt @db.Timestamp(6)
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    String     @unique
  User      User       @relation(fields: [userId], references: [username])
  items     CartItem[]
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @updatedAt @db.Timestamp(6)
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  Cart      Cart     @relation(fields: [cartId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    String
  User      User        @relation(fields: [userId], references: [username])
  items     OrderItem[]
  total     Float
  status    OrderStatus
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime    @updatedAt @db.Timestamp(6)
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  Order     Order    @relation(fields: [orderId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

enum ProductCategory {
  ELECTRONICS
  FASHION
  HOME_APPLIANCES
  BOOKS
  BEAUTY
  TOYS
  SPORTS
  AUTOMOTIVE
  GROCERY
  HEALTH
  JEWELRY
  MUSIC
  OFFICE_SUPPLIES
  PET_SUPPLIES
  SOFTWARE
  TOOLS
  VIDEO_GAMES
  BABY_PRODUCTS
  OUTDOOR
  FURNITURE
}
